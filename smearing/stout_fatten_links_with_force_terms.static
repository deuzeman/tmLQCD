#include "cayley_hamilton_exponent_with_force_terms.static"

static void stout_fatten_links_with_force_terms(stout_control *control)
{
#define _CALCULATE_WEIGHTED_PLAQUETTE(x, principal)                                                                                                             \
{                                                                                                                                                               \
  _su3_times_su3d(control->Q[control->current].field[x][principal], control->scratch[0].field[x][principal], control->U[control->current].field[x][principal]); \
  _real_times_su3(control->Q[control->current].field[x][principal], control->rho, control->Q[control->current].field[x][principal]);                            \
    project_antiherm(&control->Q[control->current].field[x][principal]);                                                                                        \
}
  
  for (int x = 0; x < VOLUME; ++x)
  {
    _CALCULATE_WEIGHTED_PLAQUETTE(x, I0_0);
    _CALCULATE_WEIGHTED_PLAQUETTE(x, I0_1);
    _CALCULATE_WEIGHTED_PLAQUETTE(x, I0_2);
    _CALCULATE_WEIGHTED_PLAQUETTE(x, I0_3);
  }
  
  cayley_hamilton_exponent_with_force_terms(control);
  
  for (int x = 0; x < VOLUME; ++x)
    for (int mu = 0; mu < 4; ++mu)
      _su3_times_su3(control->U[control->current + 1].field[x][mu], control->scratch[0].field[x][mu], control->U[control->current].field[x][mu]);
  
#undef _CALCULATE_WEIGHTED_PLAQUETTE
}
