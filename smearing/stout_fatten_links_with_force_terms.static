#include "cayley_hamilton_exponent_with_force_terms.static"

static void stout_fatten_links_with_force_terms(stout_control *control, gauge_field_t in)
{
  static su3 tmp;
  
  /* Alias the fields */
  gauge_field_t staples = control->scratch; /* As scratch space */
  gauge_field_t Q = control->Q.field_array[control->current_iteration];
  
#define _CALCULATE_WEIGHTED_PLAQUETTE(x, principal)                                        \
  {                                                                                        \
    _su3_times_su3d(Q[x][principal], staples.field[x][principal], in.field[x][principal]); \
    _real_times_su3(Q[x][principal], control->rho, Q[x][principal]);                       \
    project_antiherm(&Q[x][principal]);                                                    \
  }
  
  for (int x = 0; x < VOLUME; ++x)
  {
    _CALCULATE_WEIGHTED_PLAQUETTE(x, I0_0);
    _CALCULATE_WEIGHTED_PLAQUETTE(x, I0_1);
    _CALCULATE_WEIGHTED_PLAQUETTE(x, I0_2);
    _CALCULATE_WEIGHTED_PLAQUETTE(x, I0_3);
  }
  
  cayley_hamilton_exponent_with_force_terms(control);
  
  for (int x = 0; x < VOLUME; ++x)
    _su3_times_
  
#undef _CALCULATE_WEIGHTED_PLAQUETTE
}
